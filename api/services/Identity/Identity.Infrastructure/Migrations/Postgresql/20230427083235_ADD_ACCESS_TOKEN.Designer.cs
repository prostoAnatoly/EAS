// <auto-generated />
using System;
using Identity.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Identity.Infrastructure.Migrations.Postgresql
{
    [DbContext(typeof(IdentityDatabaseContext))]
    [Migration("20230427083235_ADD_ACCESS_TOKEN")]
    partial class ADD_ACCESS_TOKEN
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Identity.Domain.Aggregates.AccessTokens.AccessToken", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Expires")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires");

                    b.Property<long>("ExpiresIn")
                        .HasColumnType("bigint")
                        .HasColumnName("expires_in");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_access_token");

                    b.ToTable("access_token", (string)null);
                });

            modelBuilder.Entity("Identity.Domain.Aggregates.Identities.IdentityInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Password")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("password");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_identity_infos");

                    b.HasIndex("UserName")
                        .HasDatabaseName("ix_identity_infos_user_name");

                    b.ToTable("identity_infos", (string)null);
                });

            modelBuilder.Entity("Identity.Domain.Aggregates.AccessTokens.AccessToken", b =>
                {
                    b.OwnsOne("Identity.Domain.Aggregates.AccessTokens.RefreshToken", "RefreshToken", b1 =>
                        {
                            b1.Property<Guid>("AccessTokenId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<DateTimeOffset>("CreatedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("refresh_token_created_at");

                            b1.Property<string>("CreatedByIp")
                                .IsRequired()
                                .HasMaxLength(15)
                                .HasColumnType("character varying(15)")
                                .HasColumnName("refresh_token_created_by_ip");

                            b1.Property<DateTimeOffset>("Expires")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("refresh_token_expires");

                            b1.Property<string>("Fingerprint")
                                .IsRequired()
                                .HasMaxLength(4000)
                                .HasColumnType("character varying(4000)")
                                .HasColumnName("refresh_token_fingerprint");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)")
                                .HasColumnName("refresh_token_value");

                            b1.HasKey("AccessTokenId");

                            b1.ToTable("access_token");

                            b1.WithOwner()
                                .HasForeignKey("AccessTokenId")
                                .HasConstraintName("fk_access_token_access_token_id");
                        });

                    b.Navigation("RefreshToken")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
